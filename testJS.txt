Variables y operaciones

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una variable y para qu√© sirve?
Es un espacio en memoria en el cual podemos almacenar distintos tipos de datos ya sean strings, booleanos, enteros, entre otros. 
¬øCu√°l es la diferencia entre declarar e inicializar una variable?
Cu√°ndo declaramos una variable estamos reservando un espacio en memoria asignandole un nombre, esta quedando vac√≠a y que al momento de inicializarla le daremos un tipo de dato y un valor.
¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
Al sumar n√∫meros realizamos la operaci√≥n matem√°tica que todos conocemos para obtener como resultado un valor entero, en cambio cuando concatenamos strings, estamos uniendo dos o m√°s datos de tipop string para obtener una sola palabra o frase.
¬øCu√°l operador me permite sumar o concatenar?
El signo +.

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:

  Nombre: String
  Apellido: String
  Nombre de usuario en Platzi: String
  Edad: Number
  Correo electr√≥nico: String
  Mayor de edad: Boolean
  Dinero ahorrado: Number
  Deudas: Number

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.

let name = "Sebasti√°n"
let lastname = "Olaya"
let username = "solayae"
let age = 21
let email = "sebastianolayae@gmail.com"
let adult = true
let savings = 1000
let debts = 500

4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:

Nombre completo (nombre y apellido)
let name = "Sebasti√°n"
let lastname = "Olaya"
console.log(`Mi nombre es ${name} ${lastname}`)

Dinero real (dinero ahorrado menos deudas)
let savings = 1000
let debts = 500
let cash = savings - debts
console.log(`Mi dinero real es: $${cash} USD`)

Funciones

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n?
Conjunto de instrucciones que realizan una tarea o calcula un valor.
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
Cuando se repiten muchas veces una instrucci√≥n dentro del c√≥digo podemos usar funciones para solucionar este problema
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
Los parametros son valores que puede recibir una funci√≥n y podemos asignarlos o no, al momento de escribirla. Y los argumentos, son estos valores que pasamos al momento de llamar la funci√≥n.

2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

function saludar (name, lastName, nickname) {
  console.log(`Mi nombre es ${name} ${lastName}, pero prefiero que me digas ${nickname}.`)
}

Condicionales

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un condicional?
Es una instruccion de algo que debe ser cierto para que se pueda ejecutar, es decir que una condicional se eval√∫a por true o por false
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
if...else, switch
En el caso de if...else ejecuta una sentencia si una condicion especificada es verdadera, de lo contrario ejecutara una sentencia diferente y switch eval√∫a una expresi√≥n comparando el valor de esa expresi√≥n con una o varias instancias llamadas case
¬øPuedo combinar funciones y condicionales?
Si es posible
 
2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

const tipoDeSuscripcion = "ExpertPlus";

if (tipoDeSuscripcion === "Free") {
  console.log("Solo puedes tomar los cursos gratis");
} else if (tipoDeSuscripcion === "Basic") {
  console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} else if (tipoDeSuscripcion === "Expert") {
  console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} else if (tipoDeSuscripcion === "ExpertPlus") {
  console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
} else console.log("Ingresa un tipo de suscripci√≥n valido");

3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè

const tipoDeSuscripcion = "Expert";

if (tipoDeSuscripcion === "Free") {
  console.log("Solo puedes tomar los cursos gratis")
} if (tipoDeSuscripcion === "Basic") {
  console.log("Puedes tomar casi todos los cursos de Platzi durante un mes")
} if (tipoDeSuscripcion === "Expert") {
  console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o")
} if (tipoDeSuscripcion === "ExpertPlus") {
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o")
}

const tipoDeSuscripcion = "ExpertPlus";

let planes = [];
planes["Free"] = "Solo puedes tomar los cursos gratis";
planes["Basic"] = "Puedes tomar casi todos los cursos de Platzi durante un mes";
planes["Expert"] = "Puedes tomar casi todos los cursos de Platzi durante un a√±o";
planes["ExpertPlus"] = "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o";

if(planes[tipoDeSuscripcion]){
  console.log(planes[tipoDeSuscripcion])
}

Ciclos

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un ciclo?
Es una acci√≥n que repite una tarea o procedimiento varias veces
¬øQu√© tipos de ciclos existen en JavaScript?
for, do...while, while, break, continue son los principales y mas usados
¬øQu√© es un ciclo infinito y por qu√© es un problema?
Como su nombre lo indica es un ciclo que no se finaliza y es un problema ya que si llena el espacio total de memoria, puede bloquear nuestro pc
¬øPuedo mezclar ciclos y condicionales?
Si es posible

2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

  for (let i = 0; i < 5; i++) {
      console.log("El valor de i es: " + i);
  }

let i = 0;
while (i < 5) {
  console.log("El valor de i es: " + i)
  i++
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

let i = 10;
while (i >= 2) {
  console.log("El valor de i es: " + i);
  i--
}

3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.

üí° Pista: puedes usar la funci√≥n prompt de JavaScript.

let respuesta = parseInt(prompt("Cu√°nto es 2 + 2"));
while (respuesta != 2 + 2) {
  alert("Error, intenta de nuevo")
  respuesta = parseInt(prompt("Cu√°nto es 2 + 2"));
} alert ("Bien hecho")

Listas

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un array?
Es un tipo de dato de JS y se usa para almacenar secuencias de valores
¬øQu√© es un objeto?
Es otro tipo de dato que nos permite agrupar valores
¬øCu√°ndo es mejor usar objetos o arrays?
Es preferible usar objetos cuando son muchos valores y de distintos tipos
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
Si es posible

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

function imprimir(arrai) {
    console.log(arrai[0])
}

imprimir([1, 2, 3, 4, 5])

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

function imprimir(arrai) {
    for (i = 0; i < arrai.length; i++) {
        console.log(arrai[i])    
    }    
}

imprimir([1, 2, 3, 4, 5])

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

PENDIENTE

